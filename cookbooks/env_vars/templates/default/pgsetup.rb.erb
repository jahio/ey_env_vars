require 'rubygems'
require 'yaml'
require 'pg'

db_creds = YAML.load(File.read(File.join('', 'data', '<%= @app_name %>',
           'shared', 'config', 'database.yml')))

# Sets up the database itself if it doesn't yet exist. Otherwise won't
# touch it.
conn = PG::Connection.open(dbname: 'postgres', port: '5432',
  user:     db_creds['<%= @run_env %>']['username'],
  password: db_creds['<%= @run_env %>']['password'],
  host:     db_creds['<%= @run_env %>']['host'])

begin
  # Conduct a basic SELECT to see if our env_vars database exists
  q = "SELECT datname FROM pg_database WHERE datname = 'env_vars'"
  if conn.exec(q).count == 0 # if it exists, don't do the following
    conn.exec("CREATE DATABASE env_vars OWNER
              #{db_creds['<%= @run_env %>']['username']}")
  end
ensure
  conn.flush && conn.close # make sure to flush/close for changes
end

# Now, re-connect to the db (there doesn't appear to be an easy way to
# switch to a different db on the same connection object) and create the table
conn = PG::Connection.open(dbname: 'env_vars', port: '5432',
  user:     db_creds['<%= @run_env %>']['username'],
  password: db_creds['<%= @run_env %>']['password'],
  host:     db_creds['<%= @run_env %>']['host'])
begin
  conn.exec('CREATE TABLE IF NOT EXISTS environment_variables(
        variable_name  varchar(255) NOT NULL PRIMARY KEY,
        variable_value varchar(255)
      )')
ensure
  # Flush and close
  conn.flush && conn.close
end
